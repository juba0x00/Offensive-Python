import hashlib
import pstats
from time import perf_counter 
from colorama import Fore 
from argparse import ArgumentParser, Namespace
from cProfile import Profile 
start: float
hash: str
hash_algo: str
args: Namespace

def parse_arguments() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument('hash_file', help='file containing hash')
    parser.add_argument('wordlist_name', help='plain-text wordlist')
    parser.add_argument('hash_algo', help='Hashing Algorithm')
    parser.add_argument('-v', '--verbose', action='store_true', help='increase verbosity')
    return parser.parse_args()
    
    
def check(plain_text: str) -> None:
    match(hash_algo.lower()):
        case 'md5': 
            result = hashlib.md5(plain_text.encode()).hexdigest()
        case 'sha384': 
            result = hashlib.sha384(plain_text.encode()).hexdigest()
        case 'sha3_384': 
            result = hashlib.sha3_384(plain_text.encode()).hexdigest()
        case 'sha1':
            result = hashlib.sha1(plain_text.encode()).hexdigest()
        case 'sha224':
            result = hashlib.sha224(plain_text.encode()).hexdigest()
        case 'sha256':
            result = hashlib.sha256(plain_text.encode()).hexdigest()
        case 'sha384':
            result = hashlib.sha384(plain_text.encode()).hexdigest()
        case 'sha512':
            result = hashlib.sha512(plain_text.encode()).hexdigest()
        
            
    if args.verbose:
        print(f'{Fore.GREEN}{hash}{Fore.RESET} ?= {Fore.GREEN}{result}{Fore.RESET}')
    if result == hash:
        print(f'{Fore.RED}{plain_text}{Fore.RESET}')
        print(f'Cracking Time: {Fore.RED}{perf_counter() - start}{Fore.RESET}')
        



def main():
    global start, hash, hash_algo, args
    start = perf_counter()
    args = parse_arguments()
    hash = open(args.hash_file).readline().replace('\n', '')
    hash_algo = args.hash_algo
 
    with open(args.wordlist_name, 'r') as file:
        lines: list = file.readlines()
    
    
    for line in lines:
        line = line.replace('\n', '') if line.endswith('\n') else line
        check(line)
        
        
if __name__ == '__main__':
    with Profile() as pr:
        main()
        
    stats = pstats.Stats(pr)
    stats.sort_stats(pstats.SortKey.TIME)
    # stats.print_stats()
    print('before')

    stats.dump_stats(filename='file.prof')
    print('after')
    